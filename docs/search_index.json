[["index.html", "Fall 2020 EDAV Community Contributions Chapter 1 Instructions 1.1 Background 1.2 Preparing your .Rmd file 1.3 Submission steps 1.4 Optional tweaks 1.5 FAQ", " Fall 2020 EDAV Community Contributions 2020-11-07 Chapter 1 Instructions This chapter gives you all the information you need to upload your community contribution. Please read this entire document carefully before making your submission. Of particular note is the fact that bookdown requires a different .Rmd format than you’re used to, so you must make changes to the beginning of the file as described below before submitting. 1.1 Background This web site makes use of the bookdown package to render a collection of .Rmd files into a nicely formatted online book with chapters and subchapters. Your job will be to submit a slightly modified version of your community contribution .Rmd file to the GitHub repository where the source files for this web site are stored. On the backend, the admins will divide the chapters into book sections and order them. We use GitHub Actions to render the book and push the rendered .html files to our gh-pages branch. If your community contribution is in a different format, then create a short .Rmd file that explains what you did, and includes links to any relevant files, such as slides, etc. which you can post on your GitHub repo (or another online site.) 1.2 Preparing your .Rmd file You should only submit ONE Rmd file. After completing these modifications, your .Rmd should look like this sample bookdown .Rmd. Create a concise, descriptive name for your project. For instance, name it base_r_ggplot_graph or something similar if your work is about contrasting/working with base R graphics and ggplot2 graphics. Check the .Rmd filenames in the project repo to make sure your name isn’t already taken. Your project name should be words only and joined with underscores, i.e. Do not include whitespace in the name. Create a copy of your .Rmd file with the new name. Completely delete the YAML header (the section at the top of the .Rmd that includes name, title, date, output, etc.) including the --- line. Choose a short, descriptive, human readable title for your project as your title will show up in the table of contents – look at examples in the rendered book. Capitalize the first letter only (“sentence case”). On the first line of your document, enter a single hashtag, followed by a single whitespace, and then your title. It is important to follow this format so that bookdown renders your title as a header. Do not use single # headers anywhere else in the document. The second line should be blank, followed by your name(s): # Base R vs. ggplot2 Aaron Burr and Alexander Hamilton Your content starts here. If your project requires data, please use a built-in dataset or read directly from a URL, such as: df &lt;- readr::read_csv(\"https://people.sc.fsu.edu/~jburkardt/data/csv/addresses.csv\") If you absolutely must include a data file, please use a small one, as for many reasons it is desirable to keep the repository size as small as possible. If you have included a setup chunk in your Rmd file, please remember to remove the label setup in the chunk, ie., use : {r, include=FALSE} instead of {r setup, include=FALSE} Want to get fancy? See the optional tweaks section below. 1.3 Submission steps To submit your work, we will be following the instructions in this tutorial, which are provided in abbreviated form below, with specific instructions on naming conventions, content information, and other important details. Fork cc20 repo (this repo) to your GitHub account. Clone/download the forked repo to your local computer. Create a new branch and name it with your project name, in our case sample_project. If you forget to do so, check this tutorial to fix. Copy your modified .Rmd file with the same name into the root directory on the branch. In our example, it is sample_project.Rmd. Do not include an .html file. (In order for the bookdown package to work, all .Rmd files will be rendered behind the scenes.) [OPTIONAL] If you have other resources (such as images) included in your project, create a folder under resources/. In our example, it is resources/sample_project/. Put the resources files there. When you are ready to submit your project, push your branch to your remote repo. Follow this tutorial to create a pull request. 1.4 Optional tweaks If you prefer for links from your chapter to open in new tabs, add {target=\"_blank\"} after the link, such as: [edav.info](edav.info){target=\"_blank\"} Note that your headers (##, ###, etc.) will be converted to numbered headings as such: ## –&gt; 3.1 ### –&gt; 3.1.1 These headings will appear as chapter subheadings and sub-subheadings in the navigation panel on the left. Think about a logical structure for users to navigate your chapter. We recommend using only ## and ### headings as subheadings such as 4.1.3.4 are generally not necessary and look messy. Unfortunately, there’s no simple way to preview your chapter before it’s actually merged into the project. (bookdown has preview_chapter() option but it only works after the entire book has been rendered at least once and that will become more and more complex and require more and more packages as the project grows.) If you really want to preview it, fork and clone this minimal bookdown repo, add your .Rmd file, click the “Build book” button on the Build tab (next to Git), and then open any of the .html files in the _book folder in a web browser to see the rendered book. (Do not click the Knit button as it will not build a bookdown book.) If you’re interested in more bookdown options, see the official reference book. Have more useful tweaks to share? Submit an issue or PR. 1.5 FAQ 1.5.1 What should I expect after creating a pull request? Within a week after you create a pull request, we will apply a label to it and assign an administrater who will review all the files you submit to see if they meet the requirements. It will take some time before we can process all the pull requests, so as long as you see your pull request has been labeled and assigned to an administrater, don’t worry. However, if the admin contacts you regarding the pull request, that usually means your files fail to meet some requirements. The admin will clearly state what is wrong, so please fix them as soon as possible. 1.5.2 What if I catch mistakes after my pull request is merged? You may submit additional pull requests to fix material on the site. If the edits are small, such as fixing typos, it is easiest to make the edits directly on GitHub, following these instructions. We will merge first pull requests before edits, so please be patient. 1.5.3 Other questions If you encounter other problems, please submit an issue and we will look into it. Thank you for your contributions! "],["sample-project.html", "Chapter 2 Sample project", " Chapter 2 Sample project Joe Biden and Donald Trump This chapter gives a sample layout of your Rmd file. Test Photo "],["customized-plot-matrix-pairs-ggpairs.html", "Chapter 3 Customized Plot Matrix: pairs(), ggpairs() 3.1 3. Categorical variables 3.2 4. Outside sources", " Chapter 3 Customized Plot Matrix: pairs(), ggpairs() Yibai Liu library(GGally) library(ggplot2) library(vcd) ## 1. Overview: Things we can do with pairs() and ggpairs() When our data contains multivariate variables, it is important to evaluate associations between these variables before modeling. We can create scatterplot matrices, correlation matrix, as well as mosaic pairs plots to get an idea about if and how these variables are correlated with each other. In this tutorial, I would plot using a base r function **pairs()** and a function **ggpairs()** from the `GGally` package, which both functions provide methods to generate customized plot matrices. Plots for different purposes: - Scatterplot matrix: correlations between continuous variables - Mosaic pairs plot: correlations between categorical variables ## 2. Scatterplot matrix for continuous variables ### 2.1 Plot with pairs() #### Basic scatterplot matrix of the `mtcars dataset (All numeric variables) ```r data(mtcars) pairs(~., data = mtcars, main = &quot;Scatterplot Matrix of `mtcars`&quot;) We notice that there are some numeric variables actually discrete or representing categories, so we can trim all discrete and categorical variables, and only plot continuous variables in the matrix. 3.0.0.1 2.1.1 Continuous variables only pairs(mtcars[, c(1,3:7)], main = &quot;Scatterplot Matrix of `mtcars`&quot;) 3.0.0.2 2.1.2 Change color, shape, size of points, as well as labels and gaps of the plot pairs(mtcars[, c(1,3:7)], col = &quot;blue&quot;, # Change color pch = 19, # Change shape of points cex = 0.8, # Change size of points labels = c(&quot;Miles&quot;,&quot;Displacement&quot;,&quot;Horsepower&quot;, &quot;Rear axle ratio&quot;,&quot;Weight&quot;,&quot;1/4 mile time&quot;), # Change labels gap = 0.3, # Change gaps in between main = &quot;Scatterplot Matrix of `mtcars`&quot;) 3.0.0.3 2.1.3 Add a smoother pairs(mtcars[, c(1,3:7)], lower.panel = panel.smooth, # Add a smoother for the lower panel col = &quot;blue&quot;, pch = 19, cex = 0.8, labels = c(&quot;Miles&quot;,&quot;Displacement&quot;,&quot;Horsepower&quot;, &quot;Rear axle ratio&quot;,&quot;Weight&quot;,&quot;1/4 mile time&quot;), gap = 0.3, main = &quot;Scatterplot Matrix of `mtcars`&quot;) 3.0.0.4 2.1.4 Separate groups using different colors 3.0.0.5 Tip: You can also highlight a certain level of a categorical variable by simply turn other levels to grey mtcars$vs &lt;- as.factor(mtcars$vs) pairs(mtcars[, c(1,3:7)], col = c(&quot;blue&quot;,&quot;red&quot;)[mtcars$vs], # Group by variable `vs` pch = 19, cex = 0.8, labels = c(&quot;Miles&quot;,&quot;Displacement&quot;,&quot;Horsepower&quot;, &quot;Rear axle ratio&quot;,&quot;Weight&quot;,&quot;1/4 mile time&quot;), gap = 0.3, main = &quot;Scatterplot Matrix of `mtcars` Grouped by Engine&quot;) By separating data points by vs or the engine type, we can see that two groups form distinct clusters for many of the variables. 3.0.0.6 2.1.5 Choose panel display If the plot seems dominated by too many points, you can turn off one of the panels. pairs(mtcars[, c(1,3:7)], col = c(&quot;blue&quot;,&quot;red&quot;)[mtcars$vs], pch = 19, cex = 0.8, labels = c(&quot;Miles&quot;,&quot;Displacement&quot;,&quot;Horsepower&quot;, &quot;Rear axle ratio&quot;,&quot;Weight&quot;,&quot;1/4 mile time&quot;), gap = 0.3, upper.panel = NULL, # Turn off the upper panel above the diagonal main = &quot;Scatterplot Matrix of `mtcars`&quot;) 3.0.0.7 2.1.6 Customize your own plot matrix The plot matrix is consisted of multiple panels, e.g. the upper panel, lower panel, diagonal panel, etc. You can customize each panel and make your own plot. #Panel of correlations panel.corr &lt;- function(x, y){ usr &lt;- par(&quot;usr&quot;); on.exit(par(usr)) par(usr = c(0, 1, 0, 1)) r &lt;- round(cor(x, y), digits=3) txt &lt;- paste0(&quot;Corr: &quot;, r) text(0.5, 0.5, txt, cex = 1) } #Panel of histograms panel.hist &lt;- function(x, ...){ usr &lt;- par(&quot;usr&quot;); on.exit(par(usr)) par(usr = c(usr[1:2], 0, 1.5) ) h &lt;- hist(x, plot = FALSE) breaks &lt;- h$breaks len &lt;- length(breaks) y &lt;- h$counts/max(h$counts) rect(breaks[-len], 0, breaks[-1], y, col = &quot;lightblue&quot;) } #Panel of scatterplots panel.scat &lt;- function(x, y){ points(x,y, pch = 19, cex = 1, col = &quot;coral&quot;) } #Plot pairs(mtcars[, c(1,3:7)], lower.panel = panel.scat, upper.panel = panel.corr, diag.panel = panel.hist, labels = c(&quot;Miles&quot;,&quot;Displacement&quot;,&quot;Horsepower&quot;, &quot;Rear axle ratio&quot;,&quot;Weight&quot;,&quot;1/4 mile time&quot;), gap = 0.3, main = &quot;Scatterplot matrix of `mtcars`&quot;) 3.0.1 2.2 Plot with ggpairs() from GGally package 3.0.1.1 2.2.1 Basic ggpairs() plot # You need both ggplot2 and GGally packages loaded to work with ggpairs() ggpairs(mtcars[, c(1,3:7)], columnLabels = c(&quot;Miles&quot;,&quot;Displacement&quot;,&quot;Horsepower&quot;, &quot;Rear axle ratio&quot;,&quot;Weight&quot;,&quot;1/4 mile time&quot;), upper = list(continuous = wrap(&#39;cor&#39;, size = 4)), title = &quot;Scatterplot matrix of `mtcars`&quot;) 3.0.1.2 2.2.2 Separate groups using different colors ggpairs(mtcars[, c(1,3:7)], columnLabels = c(&quot;Miles&quot;,&quot;Displacement&quot;,&quot;Horsepower&quot;, &quot;Rear axle ratio&quot;,&quot;Weight&quot;,&quot;1/4 mile time&quot;), aes(color = mtcars$vs), # Separate data by levels of vs upper = list(continuous = wrap(&#39;cor&#39;, size = 3)), lower = list(combo = wrap(&quot;facethist&quot;, bins = 30)), diag = list(continuous = wrap(&quot;densityDiag&quot;, alpha = 0.5)), title = &quot;Scatterplot matrix of `mtcars` Grouped by Engine&quot;) 3.1 3. Categorical variables There are some categorical variables in the dataset mtcars. We can turn these variables and also discrete variables into factors ### 3.1 Factorize discrete/categorical variables mtcars$cyl &lt;- as.factor(mtcars$cyl) mtcars$am &lt;- as.factor(mtcars$am) mtcars$gear &lt;- as.factor(mtcars$gear) Now we can create a mosaic pairs plot with pairs_diagonal_mosaic() in the vcd package 3.1.1 3.2 pairs() plot for categorical variables # The pairs_diagonal_mosaic() function is in the `vcd` package p &lt;- mtcars[, c(2,8:10)] pairs(table(p), # Here the data needs to be in a table format diag_panel = pairs_diagonal_mosaic(offset_varnames=-2.5)) #move down variable labels 3.1.2 3.3 Highlight correlations with shade colors pairs(table(p), diag_panel = pairs_diagonal_mosaic(offset_varnames=-2.5), #move down variable names upper_panel_args = list(shade = TRUE), #set shade colors lower_panel_args = list(shade = TRUE)) 3.2 4. Outside sources 3.2.0.1 You can check out the following links to find more interesting ways to customize your plot matrix. [R pairs &amp; ggpairs Plot Functions] https://statisticsglobe.com/r-pairs-plot-example/#:~:text=The%20pairs%20R%20function%20returns,pairs%20command%20is%20shown%20above. [ggpairs() r documentation] https://www.rdocumentation.org/packages/GGally/versions/1.5.0/topics/ggpairs [Pairs plot for contingency tables] http://finzi.psych.upenn.edu/R/library/vcd/html/pairs.table.html "]]
